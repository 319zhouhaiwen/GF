<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:jsp="http://java.sun.com/xml/ns/javaee/jsp" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">
  <!-- 解决编码格式 -->
	<filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <!-- 拦截所有  所以说只要配置一次全局有效 -->
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
  
  <jsp-config>
    <taglib>
      <taglib-uri>/aa</taglib-uri>
      <taglib-location>/mytag/tag.tld</taglib-location>
    </taglib>
    <taglib>
      <taglib-uri>/emp</taglib-uri>
      <taglib-location>/mytag/emp.tld</taglib-location>
    </taglib>
    <taglib>
      <taglib-uri>/ag</taglib-uri>
      <taglib-location>/mytag/ag.tld</taglib-location>
    </taglib>
	<taglib>
		<taglib-uri>/advGsCd</taglib-uri>
		<taglib-location>/mytag/adv.tld</taglib-location>
	</taglib>
	
  </jsp-config>
  
    <welcome-file-list>
        <welcome-file>GF/flogin/login.jsp</welcome-file>
    </welcome-file-list>
 	<filter>
		<filter-name>LoginFilter</filter-name><!-- 过滤器名称 -->
		<filter-class>filter.LoginFilter</filter-class><!-- 路径指向过滤器java文件  -->
	</filter>
	<filter-mapping>
		<filter-name>LoginFilter</filter-name>
		<url-pattern>*.jsp</url-pattern>
	</filter-mapping>
	
	
	<welcome-file-list>
        <welcome-file>GF/flogin/alogin.jsp</welcome-file>
    </welcome-file-list>
	 <filter>
		<filter-name>LoginFilter2</filter-name>
		<filter-class>filter.LoginFilter2</filter-class>
	</filter> 
	<filter-mapping>
		<filter-name>LoginFilter2</filter-name>
		<url-pattern>*.jsp</url-pattern>
	</filter-mapping> 
	

	 <!--配置spring-->
   <!--它的作用就是启动Web容器时，自动装配ApplicationContext的配置信息。因为它实现了ServletContextListener这个接口，在web.xml配置这个监听器，启动容器时，就会默认执行它实现的方法。  -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!-- 这段配置是用于指定applicationContext.xml配置文件的位置，可通过context-param加以指定： param指定的 classpath:spring.xml的意思就是web-inf文件夹下的spring.xml文件-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring.xml</param-value>
	</context-param>
	
	<!-- springmvc配置 -->
	  <servlet>
	   <!-- 这个名字是配置文件.XML文件的文件名 -->
		<servlet-name>mySpringMvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>  <!-- 到the web文档中可以查找获得 -->
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:springmvc.xml</param-value> <!-- 此配置文件在源码下 -->
		</init-param>
		<multipart-config>
			<max-file-size>52428800</max-file-size>
			<max-request-size>52428800</max-request-size>
			<file-size-threshold>0</file-size-threshold>
		</multipart-config>
	</servlet>
	<servlet-mapping>    
	    <servlet-name>mySpringMvc</servlet-name>    
	    <url-pattern>/</url-pattern>
	</servlet-mapping>
	
	
	<filter>
        <filter-name>MultipartFilter</filter-name>
        <filter-class>org.springframework.web.multipart.support.MultipartFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>MultipartFilter</filter-name>
        <servlet-name>mySpringMvc</servlet-name>
    </filter-mapping>
	  <!-- 配置 HiddenHttpMethodFilter: 把 POST 请求转为 DELETE、PUT 请求 -->
	<filter>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
	</filter>
	
	<filter-mapping>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- 解决put delete请求问题 -->
	 <filter>
		<filter-name>httpPUTOrDelete2GetFilter</filter-name>
		<filter-class>filter.HttpPUTOrDelete2GetFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>httpPUTOrDelete2GetFilter</filter-name>
		<servlet-name>mySpringMvc</servlet-name>
		<dispatcher>FORWARD</dispatcher>
	</filter-mapping>
	
	<!-- 处理PUT提交参数(只对基础表单生效) -->
	<filter>
	    <filter-name>httpPutFormContentFilter</filter-name>
	    <filter-class>org.springframework.web.filter.HttpPutFormContentFilter</filter-class>
	</filter>
	<filter-mapping>
	    <filter-name>httpPutFormContentFilter</filter-name>
	    <!-- 拦截所有 -->
	    <url-pattern>/*</url-pattern>
	</filter-mapping> 

</web-app>